"use strict";(()=>{var e={};e.id=891,e.ids=[891],e.modules={517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},4300:e=>{e.exports=require("buffer")},2361:e=>{e.exports=require("events")},3685:e=>{e.exports=require("http")},5687:e=>{e.exports=require("https")},5477:e=>{e.exports=require("punycode")},2781:e=>{e.exports=require("stream")},7310:e=>{e.exports=require("url")},9796:e=>{e.exports=require("zlib")},1163:(e,r,t)=>{t.r(r),t.d(r,{headerHooks:()=>j,originalPathname:()=>v,patchFetch:()=>A,requestAsyncStorage:()=>_,routeModule:()=>m,serverHooks:()=>f,staticGenerationAsyncStorage:()=>h,staticGenerationBailout:()=>x});var o={};t.r(o),t.d(o,{POST:()=>l});var s=t(5419),a=t(9108),n=t(9678),i=t(8070),u=t(9983),p=t(789),d=t.n(p);let c=process.env.REPLICATE_API_TOKEN;async function l(e,{params:r}){try{let t=(0,u.B)();if(!t)return i.Z.json({error:"Supabase not configured"},{status:500});let{data:{user:o},error:s}=await t.auth.getUser();if(s||!o)return i.Z.json({error:"Authentication required"},{status:401});let{projectId:a}=r,{message:n}=await e.json();if(!n||"string"!=typeof n||!n.trim())return i.Z.json({error:"Message is required"},{status:400});let{data:p,error:l}=await t.from("projects").select("id, name, extracted_text, user_id").eq("id",a).eq("user_id",o.id).single();if(l||!p)return i.Z.json({error:"Project not found or access denied"},{status:404});if(!p.extracted_text)return i.Z.json({error:"Project documents are still being processed"},{status:400});if(!c)return i.Z.json({error:"Replicate API not configured"},{status:500});let m=new(d())({auth:c}),_=`You are an AI assistant helping analyze documents for the project "${p.name}". 

Here are the extracted documents:
${p.extracted_text}

User Question: ${n.trim()}

Please provide a helpful response based on the document content above. If the question cannot be answered from the provided documents, please say so clearly.`,h=await m.stream("meta/meta-llama-3-8b-instruct",{input:{prompt:_,max_tokens:512,temperature:.7,system_prompt:"You are a helpful assistant that analyzes documents and answers questions based on their content. Always base your responses on the provided document text.",prompt_template:"<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n\n{system_prompt}<|eot_id|><|start_header_id|>user<|end_header_id|>\n\n{prompt}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n\n"}}),f="";for await(let e of h)f+=e;if(!f.trim())throw Error("Empty response from AI model");let{error:j}=await t.from("project_conversations").insert({project_id:a,user_message:n.trim(),ai_response:f.trim(),created_at:new Date().toISOString()});return j&&console.error("Error saving conversation:",j),i.Z.json({response:f.trim(),projectName:p.name})}catch(e){return console.error("Project chat error:",e),i.Z.json({error:"Failed to process chat request",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}let m=new s.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/projects/[projectId]/chat/route",pathname:"/api/projects/[projectId]/chat",filename:"route",bundlePath:"app/api/projects/[projectId]/chat/route"},resolvedPagePath:"/Users/Aaron/Downloads/app chatgpt cari/app/api/projects/[projectId]/chat/route.ts",nextConfigOutput:"",userland:o}),{requestAsyncStorage:_,staticGenerationAsyncStorage:h,serverHooks:f,headerHooks:j,staticGenerationBailout:x}=m,v="/api/projects/[projectId]/chat/route";function A(){return(0,n.patchFetch)({serverHooks:f,staticGenerationAsyncStorage:h})}},9983:(e,r,t)=>{t.d(r,{B:()=>n});var o=t(2409);let s=process.env.NEXT_PUBLIC_SUPABASE_URL,a=process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;function n(){return s&&a?(0,o.eI)(s,a):(console.warn("Missing NEXT_PUBLIC_SUPABASE_URL or NEXT_PUBLIC_SUPABASE_ANON_KEY environment variables"),null)}}};var r=require("../../../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),o=r.X(0,[638,206,409,789],()=>t(1163));module.exports=o})();